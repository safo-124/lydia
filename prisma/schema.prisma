// This is your complete Prisma schema file for the entire project.
// It defines the database structure for both the storefront and dashboard applications.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ------------------------------------------
// --- Application-Specific Models        ---
// ------------------------------------------

// Represents a single item available on the restaurant's menu.
model MenuItem {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  name        String
  description String
  price       Float
  imageUrl    String?
  category    String
}

// Represents a customer's food order.
model Order {
  id           Int         @id @default(autoincrement())
  createdAt    DateTime    @default(now())
  totalPrice   Float
  status       OrderStatus @default(PENDING)
  items        Json
  customerName String

  // Optional relation to the User model for logged-in users.
  userId       String?
  user         User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
}

// Represents a customer's table reservation request.
model Reservation {
  id              Int               @id @default(autoincrement())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  customerName    String
  email           String
  phone           String
  reservationDate DateTime
  partySize       Int
  notes           String?
  status          ReservationStatus @default(PENDING)

  // Optional relation to the User model for logged-in users.
  userId          String?
  user            User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
}

// ------------------------------------------
// --- Enums for Status Fields            ---
// ------------------------------------------

enum OrderStatus {
  PENDING
  ACCEPTED
  PREPARING
  COMPLETED
  CANCELLED
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

// ------------------------------------------
// --- Auth.js Models (for User Auth)     ---
// ------------------------------------------

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  reservations  Reservation[] // Relation to the new Reservation model
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
